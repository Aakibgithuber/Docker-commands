1.docker images → // give all the images present in your machine

2.docker search ubuntu → // search whether the image of ubuntu is present locally and if not present then it pull it from docker hub

3.docker pull ubuntu → pull image from docker hub

4.service docker start → checks whether service is start or not

5.docker start <container name> → start the container

6.exit → to exit from container

7.docker attach <container name > → to go inside a running container

8.docker ps -a →to see all the containers

9.docker ps → to see only running containers

10.docker run -it  - name <container name> <image name> /bin /bash →to give name to a container

11.docker stop <container name> → to stop running container

12.docker rm < container name > → to delete a container

13. docker info --> check status

14.cat /etc/os-release --> to check the version of linux in your container
15. docker diff aakib container update_image
16. docker commit new_container updated_image
17. docker build -t myimge .
18. docker run -it --name container2 --privileged = true --volumes-from container1 ubuntu /bin/bash #sharing colume along containers
19. docker run -it --name container3 -v /volume2 ubuntu /bin/bash  #creating volume using command 
20. docker run -it --name hostcont -v /home/ec2-user: /rajput --privileged = true ubuntu /bin/bash
21. docker volume ls
22. docker volume create <volume_name>
23. docker volume rm <volume_name>
24. docker volume prune
25. docker volume inspect <volume_name>
26. docker container inspect <container_name>
27. docker run -d --name netflix -p 8081:80 my-dating-app:latest
28. docker port techserver
29. docker exec -it techserver /bin/bash 
30. docker login 
31. docker tag tetrisv1 aakibkhan1212/tetrisv1:latest
32. docker push aakibkhan1212/tetrisv1:latest
33. docker pull aakibkhan1212/tetrisv1:latest
34. docker stop $(docker ps -a -q)
35. docker rm $(docker ps -a -q)
36. docker rmi -f $(docker images -q)
